require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe KeepsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Keep. As you add validations to Keep, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { title: 'Get a Rest' } }
  let(:invalid_attributes) { { title: nil } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # KeepsController. Be sure to keep this updated too.

  describe "GET #index" do
    it "assigns all keeps as @keeps" do
      keep = Keep.create! valid_attributes
      get :index, params: {}
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET #show" do
    it "assigns the requested keep as @keep" do
      keep = Keep.create! valid_attributes
      get :show, params: {id: keep.to_param}
      expect(assigns(:keep)).to eq(keep)
    end
  end

  describe "GET #edit" do
    it "assigns the requested keep as @keep" do
      keep = Keep.create! valid_attributes
      get :edit, params: {id: keep.to_param}
      expect(assigns(:keep)).to eq(keep)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Keep" do
        expect {
          post :create, params: {keep: valid_attributes}
        }.to change(Keep, :count).by(1)
      end

      it "assigns a newly created keep as @keep" do
        post :create, params: {keep: valid_attributes}
        expect(assigns(:keep)).to be_a(Keep)
        expect(assigns(:keep)).to be_persisted
      end

      it "redirects to the created keep" do
        post :create, params: {keep: valid_attributes}
        expect(response).to redirect_to(Keep.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved keep as @keep" do
        post :create, params: {keep: invalid_attributes}
        expect(assigns(:keep)).to be_a_new(Keep)
      end

      it "re-renders the 'index' template" do
        post :create, params: {keep: invalid_attributes}
        expect(response).to render_template("index")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:keep){ FactoryGirl.create :keep }
      let(:new_attributes) { { started: true, started_at: Time.now } }

      it { expect(keep).to_not be_started }
      it { expect(keep).to_not be_completed }

      it "updates the requested keep with started status" do
        put :update, params: {id: keep.to_param, keep: new_attributes}
        keep.reload
        expect(keep).to be_started
      end

      it "updates the requested keep with completed status" do
        put :update, params: {id: keep.to_param, keep: { completed: true, completed_at: Time.now }}
        keep.reload
        expect(keep).to be_completed
      end

      it "assigns the requested keep as @keep" do
        put :update, params: {id: keep.to_param, keep: valid_attributes}
        expect(assigns(:keep)).to eq(keep)
      end

      it "redirects to the keep" do
        put :update, params: {id: keep.to_param, keep: valid_attributes}
        expect(response).to redirect_to(keep)
      end
    end

    context "with invalid params" do
      it "assigns the keep as @keep" do
        keep = Keep.create! valid_attributes
        put :update, params: {id: keep.to_param, keep: invalid_attributes}
        expect(assigns(:keep)).to eq(keep)
      end

      it "re-renders the 'edit' template" do
        keep = Keep.create! valid_attributes
        put :update, params: {id: keep.to_param, keep: invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested keep" do
      keep = Keep.create! valid_attributes
      expect {
        delete :destroy, params: {id: keep.to_param}
      }.to change(Keep, :count).by(-1)
    end

    it "redirects to the keeps list" do
      keep = Keep.create! valid_attributes
      delete :destroy, params: {id: keep.to_param}
      expect(response).to redirect_to(keeps_url)
    end
  end

end
